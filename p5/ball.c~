#include <assert.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>

#define READ 0
#define WRITE 1

int main (int argc, char *argv[]){
	int ph[2],hp[2];
	int pelota=0,num;
	assert(argc==2);
	if((num=atoi(argv[1]))==-1){
		printf("Error al convertir numero\n");
		exit(-1);
	}
	if(pipe(ph)<0){
		printf("Error al crear la pipe\n");
		exit(-1);
	}
	if(pipe(hp)<0){
		printf("Error al crear la pipe\n");
		exit(-1);
	}
	switch (fork()){
		case -1: printf("Error\n");
			 exit(-1);
		case 0: //HIJO
			close(hp[READ]);
			close(ph[WRITE]);
			int lect=read(ph[READ],&pelota,sizeof(int));
			while(lect!=0){
				printf("H: Error al llegir la pipe hp\n");
				exit(-1);
			}
			sleep(1);
			pelota++;
			printf(" H:%i\n",pelota);
			if(write(hp[WRITE],&pelota,sizeof(int))<0){
				printf("H: Error al escriure la pipe hp\n");
				exit(-1);
			}
		//close(hp[WRITE]);
			printf("mato el fill\n");
			exit(0);
		break;
		default: //PADRE
			close(hp[WRITE]);
			close(ph[READ]);
			printf("INICIO EL JUEGO\n");
			printf(" P:%i\n",pelota);
			if(write(ph[WRITE],&pelota,sizeof(int))<0){
					printf("P: Error al escriure la pipe hp\n");
					exit(-1);
			}
			do{
				if(read(hp[READ],&pelota,sizeof(int))<0){
					printf("P: Error al llegir la pipe hp\n");
					exit(-1);
				}
				sleep(1);
				pelota++;
				printf(" P:%i\n",pelota);
				if(write(ph[WRITE],&pelota,sizeof(int))<0){
					printf("P: Error al escriure la pipe hp\n");
					exit(-1);
				}
			}while((pelota+2)<num);
			//wait();
			printf("FIN DEL JUEGO\n");
			close(hp[WRITE]);
			close(ph[WRITE]);
			
			exit(1);
		break;		
	}
				
}
